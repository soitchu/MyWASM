function int randomInt(int start, int end) {
  return dtoi(random() * itod(end - start + 1));
}

function void merge(array int arr, int p, int q, int r, array int L, array int M) {
  int n1 = q - (p - 1);
  int n2 = r - q;

  for (int i = 0; i < n1; i = i + 1){
    L[i] = arr[p + i];
  }

  for (int j = 0; j < n2; j = j + 1){
    M[j] = arr[q + 1 + j];
  }

  int i = 0;
  int j = 0;
  int k = p;

  while ((i < n1) and (j < n2)) {
    if (L[i] <= M[j]) {
      arr[k] = L[i];
      i = i + 1;
    } else {
      arr[k] = M[j];
      j = j + 1;
    }
    k = k + 1;
  }

  while (i < n1) {
    arr[k] = L[i];
    i = i + 1;
    k = k + 1;
  }

  while (j < n2) {
    arr[k] = M[j];
    j = j + 1;
    k = k + 1;
  }
}

function void mergeSort(array int arr, int l, int r, array int L, array int M) {
  if (l < r) {

    int m = l + (r - l) / 2;

    mergeSort(arr, l, m, L, M);
    mergeSort(arr, m + 1, r, L, M);

    merge(arr, l, m, r, L, M);
  }
}

export function void main() {
  int size = 10000000;
  array int arr = new int[size];
  array int L = new int[size];
  array int M = new int[size];

  for(int i = 0; i < size; i = i + 1){
    arr[i] = randomInt(0, 10000);
  }

  mergeSort(arr, 0, size - 1, L, M);

  delete_i32_array(L);
  delete_i32_array(M);
}